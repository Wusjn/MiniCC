
struct alice{
	struct bob{
		int a[2];
		int b;
	}
	struct bob a[2][4];
	int b[10];
	struct alice *next;
}

int print_alice(struct alice *a){
	int j;
	j=0;
	while(j<10){
		putint(a[0].b[j]);
		putchar(10);
		j=j+1;
	}
	j=0;
	while(j<2){
		int k;
		k=0;
		while(k<4){
			putint(a[0].a[j][k].b);
			putchar(10);
			putint(a[0].a[j][k].a[0]);
			putchar(10);
			putint(a[0].a[j][k].a[1]);
			putchar(10);
			k=k+1;
		}
		j=j+1;
	}
	putchar(10);
	return 0;
}

struct alice *fill(struct alice *a,int len){
	int tag;
	int i;
	tag=0;
	i=0;
	a[0].next=a+(len-1);
	while(i<len){
		if(i>0) a[i].next=a+(i-1);
		int j;
		j=0;
		while(j<10){
			a[i].b[j]=tag;
			tag=tag+1;
			j=j+1;
		}
		j=0;
		while(j<2){
			int k;
			k=0;
			while(k<4){
				a[i].a[j][k].b=tag;
				tag=tag+1;
				a[i].a[j][k].a[0]=tag;
				tag=tag+1;
				a[i].a[j][k].a[1]=tag;
				tag=tag+1;
				k=k+1;
			}
			j=j+1;
		}
		i=i+1;
	}
	return a;
}

int main(){
	struct alice a[10];
	struct alice *s;
	struct alice *r[2];
	struct alice **k;

	s=fill(a,10);

	int i;
	i=0;
	while(i<10){
		print_alice(a+i);
		i=i+1;
		if(i==5) break;
	}
	
	i=0;
	while(i<10){
		print_alice(s);
		i=i+1;
		s=s[0].next;
	}

	print_alice(s);	
	
	r[1]=s;
	print_alice(r[1]);

	k=r;
	print_alice(k[1]);

	s[0].next=s;
	print_alice(s[0].next);	

	if(false&&putint(65536))
		putchar(10);		

	return 0;
}

